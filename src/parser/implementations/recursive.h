#ifndef __RECURSIVE_H__
#define __RECURSIVE_H__
#include "../errors/syntax-error.h"
#include "../../lex/lex.h"
#include "../../token/token.h"
#include "../../parse-tree/parse-tree.h"

ParseTree *handle_program();
ParseTree *handle_statement_list();
ParseTree *handle_statement();
ParseTree *handle_statement_list_tail();
ParseTree *handle_compound_statement();
ParseTree *handle_expr();
ParseTree *handle_reassign_expr();
ParseTree *handle_decl_expr();
ParseTree *handle_decl_expr_assign();
ParseTree *handle_reassign_expr_tail();
ParseTree *handle_arith_expr();
ParseTree *handle_arith_expr_tail();
ParseTree *handle_arith_expr_tail_rest();
ParseTree *handle_term();
ParseTree *handle_term_list();
ParseTree *handle_term_list_tail();
ParseTree *handle_factor();
ParseTree *handle_factor_rest();
ParseTree *handle_pow();
ParseTree *handle_pow_rest();
ParseTree *handle_atom();
ParseTree *handle_array();
ParseTree *handle_items_array();
ParseTree *handle_items_array_tail();
ParseTree *handle_expr_bool();
ParseTree *handle_expr_bool_or();
ParseTree *handle_expr_bool_or_rest();
ParseTree *handle_expr_bool_and();
ParseTree *handle_expr_bool_and_tail();
ParseTree *handle_expr_bool_not();
ParseTree *handle_expr_bool_rel();
ParseTree *handle_expr_bool_rel_tail();
ParseTree *handle_expr_bool_rel_factor();
ParseTree *handle_while_statement();
ParseTree *handle_if_statement();
ParseTree *handle_else_if_statement_list();
ParseTree *handle_else_if_statement();
ParseTree *handle_elseif_statement_tail();
ParseTree *handle_else_statement();
ParseTree *handle_statement_structure();
ParseTree *handle_for_statement();
ParseTree *handle_for_expr_bool();
ParseTree *handle_assign_expr_list();
ParseTree *handle_assign_expr_tail();
ParseTree *handle_identifier();
ParseTree *handle_identifier_array();

void handle_program_syntax_only();
void handle_statement_list_syntax_only();
void handle_statement_syntax_only();
void handle_statement_list_tail_syntax_only();
void handle_compound_statement_syntax_only();
void handle_expr_syntax_only();
void handle_reassign_expr_syntax_only();
void handle_decl_expr_syntax_only();
void handle_decl_expr_assign_syntax_only();
void handle_reassign_expr_tail_syntax_only();
void handle_arith_expr_syntax_only();
void handle_arith_expr_tail_syntax_only();
void handle_arith_expr_tail_rest_syntax_only();
void handle_term_syntax_only();
void handle_term_list_syntax_only();
void handle_term_list_tail_syntax_only();
void handle_factor_syntax_only();
void handle_factor_rest_syntax_only();
void handle_pow_syntax_only();
void handle_pow_rest_syntax_only();
void handle_atom_syntax_only();
void handle_array_syntax_only();
void handle_items_array_syntax_only();
void handle_items_array_tail_syntax_only();
void handle_expr_bool_syntax_only();
void handle_expr_bool_or_syntax_only();
void handle_expr_bool_or_rest_syntax_only();
void handle_expr_bool_and_syntax_only();
void handle_expr_bool_and_tail_syntax_only();
void handle_expr_bool_not_syntax_only();
void handle_expr_bool_rel_syntax_only();
void handle_expr_bool_rel_tail_syntax_only();
void handle_expr_bool_rel_factor_syntax_only();
void handle_while_statement_syntax_only();
void handle_if_statement_syntax_only();
void handle_else_if_statement_list_syntax_only();
void handle_else_if_statement_syntax_only();
void handle_elseif_statement_tail_syntax_only();
void handle_else_statement_syntax_only();
void handle_statement_structure_syntax_only();
void handle_for_statement_syntax_only();
void handle_for_expr_bool_syntax_only();
void handle_assign_expr_list_syntax_only();
void handle_assign_expr_tail_syntax_only();
void handle_identifier_syntax_only();
void handle_identifier_array_syntax_only();

#endif // __RECURSIVE_H__