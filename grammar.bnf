# Syntactic Grammar for EASYC


<program>              ::= <statement>*
<statement>            ::= <expr> ";"
                         | <if_statement>
                         | <while_statement>
                         | <for_statement>
<compound_statement>   ::= "{" <statement>* "}"

<expr>                 ::= <decl_expr>
                         | <arith_expr>                    
                         | <reassign_expr>

<arith_expr>           ::= <term> <arith_expr_tail>?
<arith_expr_tail>      ::= ("+" | "-") <term> <arith_expr_tail>?
<decl_expr>            ::= "let" <space> <identifier> ("=" <arith_expr>)?
<reassign_expr>        ::= <identifier> "=" <arith_expr>

<array>		   		   ::= "[" <items_array>? "]"
<items_array>          ::= <atom> <items_array_tail>?
<items_array_tail>	   ::= "," <atom> <items_array_tail>?
<term>                 ::= <factor> (("*" | "/") <factor>)*
<factor>               ::= ("+" | "-")* (<pow> | <atom>)
<pow>                  ::= <atom> "^" <atom>              
<atom>                 ::= <digit>+
                         | <identifier>
                         | <string>
                         | "(" <expr> ")"
                         | <array>


<expr_bool>            ::= <expr_bool_or>
<expr_bool_or>         ::= <expr_bool_and> (<space> "||" <space> <expr_bool_and>)*
<expr_bool_and>        ::= <expr_bool_not> (<space> "&&" <space> <expr_bool_not>)*
<expr_bool_not>        ::= "!" <expr_bool_not>
                         | <expr_bool_rel>
                         | "(" <expr_bool> ")"                            
<expr_bool_rel>        ::= <arith_expr> <expr_bool_rel_tail>?
<expr_bool_rel_tail>   ::= <op_bool> <arith_expr>
                         
<op_bool>              ::= "<"
                         | ">"
                         | "<="
                         | ">="
                         | "!="
                         | "=="

<while_statement>      ::= "while" <statement_structure>
<if_statement>         ::= "if" <statement_structure> <elseif_statement>* <else_statement>?
<elseif_statement>     ::= "elseif" <statement_structure>
<else_statement>       ::= "else" <space> (<expr> ";" | <compound_statement>)
<statement_structure>  ::= "(" <expr_bool> ")" (<expr> ";" | <compound_statement>)
<for_statement>        ::= "for" "(" <assign_expr_list>? ";" <expr_bool>? ";" <assign_expr_list>? ")"
                           <compound_statement>
<assign_expr_list>     ::= <reassign_expr> <assign_expr_tail>?
<assign_expr_tail>     ::= "," <reassign_expr> <assign_expr_tail>?

<identifier>           ::= <array_item> | <letter> <letter_or_digit>*
<string>               ::= <quote> (<letter_or_digit> | "_" | " ")+ <quote>
<array_item>	       ::= <identifier> "[" <arith_expr> "]"
<letter>               ::= [a-z]
                         | [A-Z]
                         | "_"
<letter_or_digit>      ::= <letter>
                         | <digit>
<digit>                ::= [0-9]
<space>                ::= " "
<new_line>             ::= "\n"
<quote>                ::= "\""